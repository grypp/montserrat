ModalBar voc => JCRev r => Echo a => Echo b => Echo c => dac;
Moog mog => dac;

220.0 => voc.freq;
2 => voc.gain;
.8 => r.gain;
.2 => r.mix;
100::ms => a.max => b.max => c.max;
75::ms => a.delay => b.delay => c.delay;
.50 => a.mix => b.mix => c.mix;

440.0 => mog.freq;
0.0 => float t;
4 => mog.gain;

.5::second => dur T;
T - (now % T) => now;




int serrat[2048];
[ 26, 32, 31, 29, 32, 31, 32, 30, 40, 36, 39, 40, 40, 39, 40, 39, 39, 40, 40, 38, 40, 39, 39, 39, 40, 39, 40, 38, 40, 40, 38, 39, 55, 56, 56, 55, 55, 56, 55, 56, 55, 56, 56, 56, 55, 55, 56, 55, 80, 79, 79, 79, 78, 78, 80, 80, 88, 86, 87, 87, 83, 88, 86, 88, 88, 87, 88, 87, 87, 88, 86, 85, 88, 83, 87, 87, 88, 86, 88, 86, 95, 94, 92, 96, 96, 95, 95, 96, 95, 96, 95, 94, 94, 96, 96, 95, 103, 104, 102, 104, 103, 102, 104, 104, 104, 104, 104, 104, 104, 104, 104, 103, 103, 102, 104, 103, 101, 104, 102, 103, 88, 86, 87, 88, 87, 87, 88, 87, 88, 87, 87, 86, 88, 88, 85, 87, 94, 96, 94, 96, 96, 94, 96, 95, 95, 96, 95, 96, 96, 96, 96, 95, 95, 96, 95, 95, 96, 94, 95, 96, 112, 111, 112, 111, 112, 110, 112, 112, 117, 120, 118, 119, 120, 120, 119, 120, 119, 118, 119, 119, 120, 120, 119, 120, 111, 112, 112, 110, 110, 112, 111, 108, 110, 111, 112, 108, 112, 110, 112, 110, 112, 111, 110, 112, 111, 111, 112, 111, 112, 111, 112, 112, 110, 112, 107, 111, 111, 112, 111, 110, 112, 111, 111, 111, 120, 120, 119, 120, 119, 120, 120, 119, 128, 127, 127, 127, 127, 128, 128, 128, 141, 142, 143, 144, 143, 144, 144, 143, 144, 144, 143, 141, 144, 143, 142, 143, 144, 143, 144, 144, 143, 144, 144, 143, 151, 152, 152, 151, 151, 150, 152, 151, 152, 150, 151, 152, 151, 149, 151, 151, 159, 160, 158, 160, 160, 158, 160, 159, 151, 152, 151, 151, 152, 149, 149, 151, 160, 158, 159, 160, 159, 158, 160, 157, 167, 168, 168, 164, 167, 168, 168, 167, 167, 168, 167, 168, 168, 168, 167, 168, 168, 167, 168, 168, 167, 168, 168, 166, 158, 160, 158, 160, 156, 160, 159, 158, 151, 152, 152, 149, 152, 151, 152, 152, 143, 142, 142, 143, 143, 144, 143, 143, 136, 134, 136, 135, 135, 135, 135, 136, 136, 133, 136, 135, 134, 136, 135, 136, 135, 136, 136, 135, 134, 134, 136, 132, 136, 134, 136, 136, 134, 133, 135, 136, 134, 135, 136, 135, 136, 134, 136, 135, 142, 144, 143, 143, 144, 143, 144, 143, 151, 152, 152, 152, 150, 152, 151, 151, 150, 152, 151, 151, 152, 151, 152, 152, 176, 175, 175, 175, 174, 176, 176, 175, 175, 176, 175, 175, 176, 174, 171, 176, 183, 184, 184, 183, 183, 184, 183, 184, 182, 184, 184, 183, 184, 181, 184, 181, 176, 175, 175, 176, 176, 172, 174, 175, 176, 175, 176, 174, 176, 173, 174, 175, 168, 168, 167, 168, 166, 167, 168, 167, 160, 160, 159, 157, 159, 160, 160, 159, 143, 142, 144, 144, 144, 142, 144, 141, 159, 160, 159, 158, 160, 159, 160, 159, 167, 168, 168, 168, 166, 168, 167, 167, 168, 167, 168, 167, 168, 168, 167, 168, 173, 175, 176, 174, 175, 176, 175, 174, 176, 176, 175, 176, 175, 172, 174, 175, 182, 181, 184, 183, 184, 182, 184, 183, 190, 192, 190, 192, 190, 190, 192, 191, 191, 192, 191, 191, 192, 184, 192, 191, 184, 182, 184, 177, 184, 183, 184, 183, 174, 176, 176, 176, 175, 176, 176, 175, 175, 176, 174, 176, 176, 175, 176, 174, 175, 175, 176, 174, 176, 176, 176, 175, 165, 166, 167, 167, 168, 166, 168, 168, 168, 167, 166, 166, 167, 168, 165, 168, 175, 174, 172, 176, 175, 175, 176, 175, 183, 182, 183, 184, 183, 183, 181, 183, 183, 183, 183, 184, 184, 183, 181, 184, 181, 183, 183, 181, 184, 182, 184, 183, 183, 184, 183, 184, 183, 184, 184, 183, 192, 192, 190, 192, 190, 190, 192, 192, 192, 191, 191, 192, 191, 192, 191, 192, 184, 184, 182, 183, 184, 183, 184, 183, 159, 160, 159, 158, 160, 159, 160, 159, 165, 168, 165, 166, 167, 168, 167, 167, 168, 168, 168, 168, 167, 168, 168, 166, 167, 167, 168, 168, 167, 164, 168, 167, 168, 168, 167, 167, 168, 167, 167, 168, 167, 168, 166, 167, 168, 166, 168, 166, 167, 168, 168, 166, 168, 168, 167, 167, 183, 184, 183, 182, 184, 183, 184, 183, 184, 183, 184, 184, 183, 184, 184, 182, 182, 184, 183, 184, 184, 183, 183, 184, 176, 176, 174, 175, 176, 175, 176, 176, 167, 168, 168, 168, 167, 168, 167, 168, 166, 168, 166, 167, 168, 163, 167, 168, 174, 176, 176, 175, 175, 175, 176, 173, 176, 175, 176, 175, 175, 176, 175, 176, 175, 174, 175, 176, 176, 176, 174, 175, 184, 184, 182, 183, 184, 184, 183, 184, 176, 174, 175, 174, 176, 175, 175, 176, 175, 174, 172, 176, 176, 175, 175, 176, 191, 192, 191, 190, 192, 191, 192, 191, 190, 192, 191, 192, 191, 191, 192, 191, 184, 184, 182, 183, 184, 183, 184, 183, 183, 184, 175, 184, 183, 183, 184, 183, 191, 192, 191, 190, 192, 191, 192, 191, 197, 199, 198, 200, 200, 199, 200, 199, 199, 200, 199, 199, 200, 199, 199, 200, 207, 205, 207, 207, 208, 208, 207, 208, 208, 206, 208, 208, 207, 208, 207, 208, 200, 199, 200, 200, 199, 198, 200, 198, 200, 199, 200, 199, 200, 198, 200, 199, 198, 200, 199, 200, 200, 199, 197, 199, 199, 200, 199, 200, 199, 199, 200, 198, 192, 191, 191, 191, 191, 192, 191, 192, 191, 191, 192, 191, 192, 191, 191, 192, 184, 183, 184, 184, 183, 184, 183, 183, 182, 184, 182, 184, 184, 183, 182, 184, 184, 183, 182, 184, 182, 184, 183, 184, 168, 167, 168, 166, 168, 168, 166, 167, 166, 167, 168, 164, 168, 166, 168, 166, 167, 168, 168, 167, 168, 165, 168, 167, 176, 174, 176, 175, 176, 175, 175, 176, 174, 174, 176, 175, 175, 174, 176, 174, 184, 183, 184, 181, 184, 183, 184, 184, 208, 206, 208, 206, 208, 207, 206, 208, 208, 206, 207, 208, 207, 208, 208, 207, 207, 208, 207, 208, 207, 206, 208, 207, 199, 200, 199, 200, 198, 199, 200, 199, 215, 216, 215, 214, 216, 215, 216, 215, 223, 222, 224, 224, 222, 224, 223, 224, 223, 224, 224, 223, 224, 223, 224, 222, 183, 184, 184, 184, 182, 184, 183, 184, 192, 190, 192, 191, 191, 192, 192, 192, 200, 198, 200, 199, 197, 200, 199, 200, 197, 200, 198, 199, 200, 199, 198, 200, 192, 191, 190, 190, 191, 192, 191, 191, 207, 206, 208, 208, 206, 208, 207, 208, 205, 208, 205, 207, 208, 208, 208, 207, 214, 216, 214, 216, 215, 214, 215, 216, 231, 232, 232, 232, 230, 232, 231, 231, 239, 240, 232, 240, 239, 239, 240, 239, 238, 240, 239, 239, 238, 240, 239, 238, 230, 231, 232, 232, 231, 231, 232, 231, 223, 223, 224, 222, 224, 224, 224, 223, 224, 222, 223, 224, 224, 224, 222, 223, 230, 232, 232, 230, 231, 229, 231, 232, 230, 232, 230, 232, 228, 232, 231, 230, 224, 222, 224, 223, 220, 224, 223, 224, 207, 207, 208, 205, 208, 207, 207, 208, 206, 208, 208, 207, 208, 207, 208, 208, 208, 207, 208, 207, 205, 208, 207, 208, 208, 206, 208, 207, 208, 208, 207, 206, 208, 205, 206, 208, 208, 205, 207, 208, 206, 205, 208, 208, 208, 207, 207, 208, 207, 207, 207, 207, 208, 206, 207, 208, 216, 214, 216, 215, 213, 216, 215, 216, 223, 224, 224, 224, 222, 224, 223, 223, 224, 224, 224, 224, 223, 224, 220, 223, 223, 224, 219, 224, 224, 223, 222, 224, 224, 224, 224, 223, 221, 224, 222, 224, 224, 224, 222, 223, 224, 223, 223, 224, 222, 224, 223, 223, 223, 223, 224, 224, 222, 224, 223, 224, 224, 224, 224, 223, 223, 224, 223, 223, 222, 223, 223, 224, 223, 223, 222, 222, 224, 224, 223, 224, 216, 216, 215, 216, 215, 215, 215, 215, 216, 214, 216, 214, 216, 215, 215, 216, 214, 215, 216, 216, 215, 216, 216, 216, 223, 224, 223, 222, 224, 223, 224, 223, 224, 221, 223, 223, 221, 224, 223, 221, 224, 224, 223, 223, 224, 224, 223, 224, 224, 223, 222, 224, 223, 224, 224, 222, 224, 223, 224, 221, 222, 223, 224, 224, 223, 223, 224, 222, 224, 224, 224, 223, 213, 213, 213, 213, 213, 213, 213, 213, 216, 214, 215, 216, 216, 215, 214, 216, 214, 214, 216, 215, 215, 214, 216, 214, 214, 216, 214, 213, 215, 216, 216, 215, 215, 216, 216, 214, 215, 216, 215, 215, 216, 215, 216, 214, 215, 216, 215, 216, 215, 215, 216, 215, 216, 213, 216, 214, 216, 214, 215, 216, 215, 216, 216, 215, 215, 216, 215, 216, 216, 216, 216, 216, 223, 222, 224, 224, 224, 223, 222, 224, 224, 221, 224, 223, 221, 223, 222, 224, 232, 230, 231, 232, 231, 230, 232, 229, 232, 231, 232, 232, 230, 232, 231, 231, 232, 231, 232, 231, 232, 231, 231, 232, 232, 232, 231, 232, 231, 231, 231, 232, 240, 239, 240, 239, 237, 239, 240, 240, 239, 240, 240, 237, 240, 238, 240, 239, 240, 238, 240, 240, 239, 238, 240, 238, 240, 239, 239, 240, 239, 240, 240, 240, 240, 238, 240, 237, 239, 239, 239, 238, 240, 238, 239, 240, 238, 240, 239, 239, 239, 240, 240, 240, 239, 240, 239, 240, 238, 240, 238, 240, 238, 238, 239, 238, 240, 238, 239, 238, 240, 240, 239, 240, 240, 238, 239, 239, 239, 239, 240, 239, 247, 246, 244, 248, 248, 247, 247, 248, 248, 248, 247, 248, 247, 248, 248, 247, 247, 248, 246, 247, 248, 246, 247, 248, 248, 247, 248, 247, 248, 248, 247, 248, 240, 240, 240, 240, 238, 240, 240, 239, 239, 240, 238, 239, 240, 240, 239, 240, 231, 232, 231, 230, 231, 231, 232, 231, 239, 238, 240, 240, 238, 240, 240, 240, 247, 243, 246, 248, 246, 247, 248, 248, 240, 237, 239, 240, 239, 238, 240, 239, 223, 224, 224, 224, 224, 224, 223, 223, 224, 223, 224, 223, 223, 224, 223, 223, 223, 224, 222, 224, 217, 224, 224, 223, 224, 223, 224, 223, 222, 224, 224, 223, 223, 223, 224, 223, 224, 224, 224, 224, 229, 231, 232, 232, 231, 232, 229, 231, 247, 248, 240, 248, 247, 247, 248, 247, 247, 248, 248, 246, 248, 247, 246, 247, 255, 254, 255, 253, 254, 255, 255, 256, 263, 264, 263, 262, 264, 263, 264, 263, 271, 272, 272, 269, 272, 271, 270, 271, 271, 272, 271, 270, 272, 271, 271, 272, 272, 271, 272, 271, 271, 272, 272, 271, 256, 255, 256, 256, 255, 256, 254, 255, 255, 256, 254, 253, 256, 253, 255, 250, 256, 254, 256, 254, 256, 254, 255, 254, 256, 253, 255, 255, 254, 256, 256, 255, 264, 263, 264, 262, 264, 262, 262, 264, 256, 256, 255, 255, 256, 255, 255, 256, 269, 271, 268, 272, 272, 272, 270, 272, 280, 279, 279, 280, 279, 280, 279, 279, 287, 287, 288, 288, 283, 288, 286, 288, 303, 304, 303, 304, 303, 302, 304, 304, 312, 310, 312, 311, 312, 311, 312, 310, 312, 311, 312, 310, 312, 312, 310, 311, 295, 296, 295, 296, 296, 295, 295, 296, 300, 304, 303, 304, 304, 304, 302, 304, 302, 304, 303, 304, 304, 302, 304, 303, 319, 320, 320, 320, 318, 320, 319, 319, 314, 319, 317, 320, 317, 318, 320, 319, 319, 317, 318, 320, 319, 319, 320, 319, 311, 311, 312, 310, 312, 312, 312, 311, 287, 286, 288, 287, 287, 287, 287, 288, 288, 288, 286, 288, 286, 287, 288, 285, 280, 279, 280, 280, 279, 280, 279, 279, 288, 286, 287, 288, 286, 288, 284, 287, 287, 288, 286, 284, 288, 285, 286, 286, 284, 288, 284, 288, 288, 286, 288, 286, 293, 296, 294, 296, 295, 296, 294, 296, 295, 296, 295, 296, 293, 296, 296, 293, 294, 296, 295, 294, 295, 295, 296, 295, 296, 295, 296, 294, 296, 296, 294, 295, 296, 294, 296, 294, 295, 295, 295, 296, 312, 310, 312, 311, 312, 311, 310, 312, 304, 304, 304, 304, 304, 302, 304, 303, 302 ] @=> serrat;


fun int map ( int i ) {
    200 + ( i * 2 ) => int f; 
    return f;
}

fun int mapHigh ( int i ) {
    10 + ( i * 2 ) => int f; 
    return f;
}


fun void varmod()
{
    while ( true )
    {
        0.5 + 0.4 *  Math.sin( t * 0.1 ) => mog.modDepth;	
        0.5 + 0.4 *  Math.sin( t * 0.2 ) => mog.modSpeed;	
        0.5 + 0.4 *  Math.sin( t * 0.3 ) => mog.filterQ;	
        0.5 + 0.4 *  Math.sin( t * 0.4 ) => mog.filterSweepRate;	
        10::ms => now;
        t + 0.01 => t;
    }
}

fun void atouch( float imp)
{
    imp => float atouch;
    while ( atouch >= 0.0 )
    {
        atouch => mog.afterTouch;
        atouch - 0.05 => atouch;
        10::ms => now;
    }
}

// spork varmod shred
spork ~varmod();


fun void echo_Shred( )
{
    0.0 => float decider => float mix => float old => float inc;
        while( true )
    {
        Math.random2f(0.0,1.0) => decider;
        if( decider < .35 ) 0.0 => mix;
        else if( decider < .55 ) .08 => mix;
        else if( decider < .8 ) .5 => mix;
        else .15 => mix;
        
        (mix-old)/1000.0 => inc; 1000 => int n;
        while( n-- )
        {
            old + inc => old => a.mix => b.mix => c.mix;
            1::ms => now;
        }
       
        mix => old;
       
        Math.random2(2,6)::second => now;
    }
}

fun void vecho_Shred( )
{
    0.0 => float decider;
    0.0 => float mix;
    0.0 => float old;
    0.0 => float inc;
    0 => int n;
    
    while( true )
    {
        Math.random2f( 0, 1 ) => decider;
        if( decider < .3 ) 0.0 => mix;
        else if( decider < .6 ) .08 => mix;
        else if( decider < .8 ) .5 => mix;
        else .15 => mix;
        
        (mix-old)/1000.0 => inc;
        1000 => n;
        while( n-- )
        {
            old + inc => old;
            old => a.mix => b.mix => c.mix;
            1::ms => now;
        }
        mix => old;
        100::ms => now;
    }
}

spork ~ vecho_Shred();
spork ~ echo_Shred();

0.0 => float vel;

for (0 => int i; i < serrat.cap(); i++) 
{ 
    map(serrat[i]) => int freqHigh;
    freqHigh => voc.freq;
    
    Math.random2f( 0.1, 4 ) => voc.noteOn;
    
    mapHigh(serrat[i]) => mog.freq;
    Math.random2f(0.3, 2) => vel;
    vel  => mog.noteOn;
    
    spork ~ atouch(vel);
    
    .20::T => now;
}
